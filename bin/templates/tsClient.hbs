import * as http from 'http';
import * as url from 'url';

interface IClientOpts {
  url: string;
}

interface IApi {
  {{#each functions}}
  {{{case @key 'camel'}}}: I{{{case @key 'pascal'}}}Function;
  {{/each}}
}

{{#each functions}}
export interface I{{{case @key 'pascal'}}}Function {
  (req?: I{{{case @key 'pascal'}}}Request): Promise<I{{{case @key 'pascal'}}}Response>;
}

{{#each this}}
{{{tsInterface (concat @../key (case @key 'pascal')) this}}}
{{/each}}
{{/each}}

async function handler(req: any = {}, urlString: string = ''): Promise<any> {
  return new Promise((resolve, reject) => {
    const reqString = JSON.stringify(req);
    const urlParts = url.parse(urlString);
    
    const input = http.request(
      {
        protocol: urlParts.protocol,
        host: urlParts.hostname,
        port: urlParts.port,
        path: urlParts.pathname,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(reqString)
        }
      },
      output => {
        let responseString = '';

        output.on('data', chunk => {
          responseString += chunk;
        });

        output.on('end', () => {
          const response = JSON.parse(responseString) || {};
          if (output.statusCode === 200) {
            resolve(response);
          } else {
            reject(response);
          }
        });
      }
    );
    input.write(reqString);
    input.end();
  });
}

export class Client implements IApi {
  url = 'http://localhost:5000';

  constructor(opts?: IClientOpts) {
    if (opts && opts.url !== undefined) {
      this.url = opts.url;
    }
  }
  {{#each functions}}

  {{{case @key 'camel'}}}: I{{{case @key 'pascal'}}}Function = async req => {
    return handler(req, `${this.url}/{{{case @key 'camel'}}}`);
  };
  {{/each}}
}
