//
// this file is automatically generated for marvelous via zappjs
// any manual changes to this file will be overwritten with the "mvs" command
//

import Foundation
{{#each actions}}

{{#each this}}
struct {{{concat (case @../key 'pascal') (case @key 'pascal')}}}: Codable {
    {{#each properties}}
    var {{{case @key 'camel'}}}: {{{case type 'pascal'}}}
    {{/each}}
}
{{/each}}
{{/each}}

func handler(_ functionName: String, req: GetWeatherRequest) {
    do {
        var request = URLRequest(url: URL(string: "http://localhost:5000/\(functionName)")!)
        request.httpMethod = "POST"
        request.httpBody = try JSONEncoder().encode(req)
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.addValue("application/json", forHTTPHeaderField: "Accept")
        
        let config = URLSessionConfiguration.default
        let session = URLSession(configuration: config)
        let task = session.dataTask(with: request) {
            (data, response, error) in
            var statusCode = 200
            if let httpResponse = response as? HTTPURLResponse {
                statusCode = httpResponse.statusCode
            }
            let strData = NSString(data: data!, encoding: String.Encoding.utf8.rawValue)!
            do {
                let json2 = try JSONSerialization.jsonObject(with: (strData.data(using: String.Encoding.utf8.rawValue))!, options: .mutableLeaves) as! NSDictionary
                print("json2 :\(json2)")
             
                if statusCode != 200 {
                    let message = json2["message"] as! String
                    throw NSError(domain: message, code: statusCode, userInfo: nil)

                } else {
                    let success = json2["condition"] as! String
                    print("Success: \(success)")
                }

            } catch let error as NSError {
                print(error.localizedDescription)
            }
        }
        
        task.resume()
    } catch let error as NSError {
        print(error.localizedDescription)
    }
}

class Client: NSObject {
    {{#each actions}}
    func {{{case @key 'camel'}}}(_ req: {{{case @key 'pascal'}}}Request) {
        return handler("{{{case @key 'camel'}}}", req: req)
    }
    {{/each}}
}
