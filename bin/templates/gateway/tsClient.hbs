/*
 * this file is automatically generated for marvelous via zappjs
 * any manual changes to this file will be overwritten with the "mvs" command
 */

import * as http from 'http';
import * as https from 'https';
import * as jwt from 'jsonwebtoken';
import * as querystring from 'querystring';
import * as url from 'url';

interface I{{{case gatewayName 'pascal'}}}GatewayClientOpts {
  authorization?: string;
  url?: string;
}

interface I{{{case gatewayName 'pascal'}}}GatewayClient {
  {{#each routes}}
  '{{{./uri}}}': {
    {{#each methods}}
    {{{@key}}}: I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}Function;
    {{/each}}
  };
  {{/each}}
}

{{{tsInterface (concat (case gatewayName 'pascal') 'GatewayClientUser') gatewaySchema.user}}}

{{#each routes}}
{{#each methods}}
export interface I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}Function {
  (request?: I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}Request): Promise<I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}Response>;
}

export interface I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}Request {
  {{#if request.body}}
  body?: I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}RequestBody;
  {{/if}}
  {{#if request.params}}
  params?: I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}RequestParams;
  {{/if}}
  {{#if request.query}}
  query?: I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}RequestQuery;
  {{/if}}
}

export interface I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}Response {
  statusCode: number;
  {{#if response.body}}
  body: I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}ResponseBody;
  {{/if}}
  headers: {
    authorization?: string;
    contentType?: string;
  }
}
{{#if request.body}}

{{{tsInterface (concat (case ../../gatewayName 'pascal') 'GatewayClient' (case @../key 'pascal') (case @key 'pascal') 'RequestBody') request.body}}}
{{/if}}
{{#if response.body}}

{{{tsInterface (concat (case ../../gatewayName 'pascal') 'GatewayClient' (case @../key 'pascal') (case @key 'pascal') 'ResponseBody') response.body}}}
{{/if}}
{{#if request.params}}

{{{tsInterface (concat (case ../../gatewayName 'pascal') 'GatewayClient' (case @../key 'pascal') (case @key 'pascal') 'RequestParams') request.params}}}
{{/if}}
{{#if request.query}}

{{{tsInterface (concat (case ../../gatewayName 'pascal') 'GatewayClient' (case @../key 'pascal') (case @key 'pascal') 'RequestQuery') request.query}}}
{{/if}}
{{/each}}
{{/each}}

export interface I{{{case gatewayName 'pascal'}}}GatewayClientListener {
  callback: Function;
  type: 'error' | 'success';
}

export interface I{{{case gatewayName 'pascal'}}}GatewayClientListenerCallback {
  (res: I{{{case gatewayName 'pascal'}}}GatewayClientListenerCallbackResponse): any;
}

export interface I{{{case gatewayName 'pascal'}}}GatewayClientListenerCallbackResponse {
  statusCode: number;
  body: any;
  headers: {
    [name: string]: string;
  };
}

export class {{{case gatewayName 'pascal'}}}GatewayClient implements I{{{case gatewayName 'pascal'}}}GatewayClient {
  private _listeners: I{{{case gatewayName 'pascal'}}}GatewayClientListener[] = [];

  authorization = '';
  token = '';
  url = 'http://localhost:5000';
  user: I{{{case gatewayName 'pascal'}}}GatewayClientUser = {} as I{{{case gatewayName 'pascal'}}}GatewayClientUser;

  constructor(opts?: I{{{case gatewayName 'pascal'}}}GatewayClientOpts) {
    if (opts && opts.authorization !== undefined) {
      this.login(opts.authorization);
    } else if (typeof localStorage !== 'undefined' && localStorage.getItem('authorization')) {
      this.login(localStorage.getItem('authorization'));
    }
    if (opts && opts.url !== undefined) {
      this.url = opts.url;
    }
  }

  private handler = async (req: any = {}, urlString: string = '', method = 'get'): Promise<any> => {
    return new Promise((resolve, reject) => {
      try {
        let urlStringWithQuery = urlString;
        if (req.query) {
          urlStringWithQuery += `?${querystring.stringify(req.query)}`;
        }

        const reqString = JSON.stringify(req.body || {});
        const urlParts = url.parse(urlStringWithQuery);
        
        const pathname = urlParts.pathname.replace(/(:[a-z][^(\.\/)]+)/gi, (a, b) => {
          return req.params[b.substr(1)] ? req.params[b.substr(1)] : b;
        });

        const requestHeaders: {
          'Authorization'?: string;
          'Content-Type': string;
          'Content-Length': number;
        } = {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(reqString)
        };
        if (this.authorization) {
          requestHeaders['Authorization'] = this.authorization;
        }

        const client = urlParts.protocol === 'https:' ? https : http;

        const input = client.request(
          {
            protocol: urlParts.protocol,
            host: urlParts.hostname,
            port: urlParts.port,
            path: pathname + (urlParts.search || ''),
            method,
            headers: requestHeaders
          },
          output => {
            let responseString = '';

            output.on('data', chunk => {
              responseString += chunk;
            });

            output.on('end', () => {
              const contentType = output.headers['content-type'];
              const responseBody = contentType.includes('application/json')
                ? JSON.parse(responseString)
                : responseString;
              if (output.statusCode >= 200 && output.statusCode <= 299) {
                const responseHeaders: {
                  authorization?: string;
                  contentType?: string;
                } = {
                  contentType
                };

                const authorization = output.headers['authorization'];
                if (authorization) {
                  responseHeaders.authorization = authorization;
                  this.login(authorization);
                }

                const res = {
                  statusCode: output.statusCode,
                  body: responseBody,
                  headers: responseHeaders
                };

                resolve(res);

                this._listeners
                  .filter(l => l.type === 'success')
                  .forEach(l => l.callback(res));

              } else {
                if (output.statusCode === 401) {
                  this.logout();
                }

                const res = {
                  statusCode: output.statusCode,
                  body: responseBody,
                  headers: {
                    contentType
                  }
                };

                reject(res);

                this._listeners
                  .filter(l => l.type === 'error')
                  .forEach(l => l.callback(res));
              }
            });
          }
        );
        input.on('error', reject);
        input.write(reqString);
        input.end();
      } catch (error) {
        reject(error);
      }
    });
  }

  login(authorization: string) {
    this.authorization = authorization;
    this.token = authorization.replace(/^Bearer /i, '');
    this.user = jwt.decode(this.token) as I{{{case gatewayName 'pascal'}}}GatewayClientUser;

    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('authorization', authorization);
    }
  }

  logout() {
    this.authorization = '';
    this.token = '';
    this.user = {} as I{{{case gatewayName 'pascal'}}}GatewayClientUser;

    if (typeof localStorage !== 'undefined') {
      localStorage.removeItem('authorization');
    }
  }

  off(type: 'error' | 'success', callback?: I{{{case gatewayName 'pascal'}}}GatewayClientListenerCallback) {
    this._listeners.forEach((listener, index) => {
      if (listener.type === type && (!callback || listener.callback === callback)) {
        this._listeners.splice(index, 1);
      }
    });
  }

  on(type: 'error' | 'success', callback: I{{{case gatewayName 'pascal'}}}GatewayClientListenerCallback) {
    this._listeners.push({
      type,
      callback
    });
  }
  {{#each routes}}

  '{{{./uri}}}': {
    {{#each methods}}
    {{{@key}}}: I{{{case ../../gatewayName 'pascal'}}}GatewayClient{{{case @../key 'pascal'}}}{{{case @key 'pascal'}}}Function;
    {{/each}}
  } = {
    {{#each methods}}
    {{{@key}}}: async (req) => {
      return this.handler(req, `${this.url}{{{../uri}}}`, '{{{@key}}}');
    }{{#unless @last}},{{/unless}}
    {{/each}}
  };
  {{/each}}
}
